<?php

namespace reketaka\helps\modules\onec\controllers;

use common\models\BaseHelper;
use common\models\Order;
use common\models\User;
use function dirname;
use function forward_static_call;
use function md5;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\web\Controller;
use Yii;
use yii\base\Exception;

/**
 * Контроллер синхронизации с 1с
 * http://v8.1c.ru/edi/edi_stnd/131/
 *
 * Class ImportOnecController
 * @package reketaka\helps\modules\onec\controllers
 */
class ImportOnecController extends Controller{

    public $enableCsrfValidation = false;

    CONST FAIL_STATUS = 'failure';
    CONST SUCCESS_STATUS = 'success';

    private $uniqId = null;

    public function actionAuto(){
        /**
         * @var $type
         * @var $mode
         * @var $filename
         */
        $queryParams = Yii::$app->request->getQueryParams();
        extract($queryParams, EXTR_OVERWRITE);

        if(!isset($type) || !isset($mode)){
            return [
                self::FAIL_STATUS,
                'Variables "type" or "mode" not preset'
            ];
        }

        $functionName = $type.ucfirst($mode);

        if(method_exists($this, $functionName)){
            return $this->$functionName($queryParams);
        }

        return [
            self::FAIL_STATUS,
            'Select function not found'
        ];

    }

    /**
     * Формирует ответ в соответствии с форматом ответа по документации "Обмен данными с вебсайтом"
     * @param $result
     * @return string
     */
    private function formatAnswer($result){
        $resultText = [];
        foreach($result as $k=>$v){
            if(!is_numeric($k)){
                $resultText[]= "$k=$v";
                continue;
            }

            $resultText[] = "$v";
        }

        return implode("\n", $resultText);
    }

    public function runAction($id, $params = [])
    {
        if((ArrayHelper::getValue($params, 'type', false) == 'sale') && (ArrayHelper::getValue($params, 'mode', false) == 'query')){
            return parent::runAction($id, $params);
        }

        try {
            $resultAction = parent::runAction($id, $params); // TODO: Change the autogenerated stub
        }catch (Exception $e){
            $resultAction = [
                self::FAIL_STATUS,
                $e->getMessage()
            ];
        }

        return $this->formatAnswer($resultAction);
    }

    private function tryAuth(){
        if(Yii::$app->user->isGuest){
            throw new Exception("User not auth");
        }

        $this->uniqId = Yii::$app->session->getId();
    }

    private function catalogCheckauth($args){
        try {
            $login = $_SERVER['PHP_AUTH_USER'];
            $password = $_SERVER['PHP_AUTH_PW'];
        }catch (\Exception $e){
            return [self::FAIL_STATUS, 'Не переданны нужны параметры'];
        }

        if(!$user = User::findByUsername($login)){
            return [self::FAIL_STATUS, 'Username or userPassword not valid'];
        }

        if($user->username != $this->module->userName){
            return [self::FAIL_STATUS, 'Username or userPassword not valid'];
        }

        if(!$user->validatePassword($password)){
            return [self::FAIL_STATUS, 'Username or userPassword not valid'];
        }

        Yii::$app->user->login($user);

        return [
            self::SUCCESS_STATUS,
            Yii::$app->session->getName(),
            Yii::$app->session->getId()
        ];


        Yii::info('Пользователь найден и пароль верный', __METHOD__);

        return array(
            self::SUCCESS_STATUS,
            $this->module->authKeyName,
            $this->module->authKeyVal."_".md5(Yii::$app->security->generateRandomString())
        );
    }

    private function catalogInit($args){
        $this->tryAuth();

        $zip = $this->module->enableZip;
        if($zip && !extension_loaded('zip')){
            $zip = false;
        }

//        $this->removeNewFiles();


        return [
            'zip'=>$zip?'yes':'no',
            'file_limit'=>$this->module->maxFileSize
        ];
    }

    private function catalogFile($args){
        $user = $this->tryAuth();
        /**
         * @var $mode
         * @var $type
         * @var $filename
         */
        extract($args, EXTR_OVERWRITE);

        if(!isset($filename)){
            throw new Exception('Filename not set');
        }

        $saveDirPath = $this->getSaveDirPath();

        FileHelper::createDirectory($saveDirPath);

        file_put_contents($saveDirPath.$filename, Yii::$app->request->getRawBody(), FILE_APPEND);

        return [
            'success'
        ];
    }

    private function catalogImport($args){
        $user = $this->tryAuth();

        /**
         * @var $mode
         * @var $type
         * @var $filename
         */
        extract($args, EXTR_OVERWRITE);

        Yii::info('Начало загрузки файла импорта', __METHOD__);

        $this->progressNewFiles();
        $this->removeNewFiles();
        $this->unZipFiles();


        Yii::info('Все файлы распакованы', __METHOD__);

        return [
            'success'
        ];
    }

    private function saleCheckauth($args){
        return $this->catalogCheckauth($args);
    }

    private function saleInit($args){
        return $this->catalogInit($args);
    }

    private function saleQuery($args){
        $user = $this->tryAuth();
        extract($args, EXTR_OVERWRITE);

        $saleQuery = $this->module->saleQuery;

        Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;
        Yii::$app->response->headers->add('Content-Type', 'text/xml');

        Yii::$app->session->remove($this->module->sessionKeyOrderUpload);
        $content = forward_static_call($saleQuery);

        return $content;
    }

    public function saleSuccess($args){
        $user = $this->tryAuth();
        extract($args, EXTR_OVERWRITE);

        if(!$ordersId = Yii::$app->session->get($this->module->sessionKeyOrderUpload)){
            return ['failure'];
        }

        if(!forward_static_call($this->module->saleSuccess, $ordersId)){
            return ['failure'];
        }

        Yii::$app->session->remove($this->module->sessionKeyOrderUpload);

        return [
            'success'
        ];
    }

    public function saleFile($args){
        $user = $this->tryAuth();
        extract($args, EXTR_OVERWRITE);

        if(!isset($filename)){
            throw new Exception('Filename not set');
        }

        $saveDirPath = $this->getSaveDirPath();

        FileHelper::createDirectory($saveDirPath);

        file_put_contents($saveDirPath.$filename, Yii::$app->request->getRawBody(), FILE_APPEND);

        $this->progressNewFiles();
        $this->removeNewFiles();
        $this->unZipFiles();

        return [
            'success'
        ];
    }

    private function getSaveDirPath(){
        return Yii::getAlias($this->module->getNewDirPath().$this->uniqId.'/');
    }

    private function getProgressDirPath(){
        $path = Yii::getAlias($this->module->getProgressDirPath());
        FileHelper::createDirectory($path);
        return $path;
    }

    private function getBackupDirPath(){
        return Yii::getAlias($this->module->saveDirPath.'/backup/');
    }

    /**
     * Удаляет принятые файлы
     * @throws \yii\base\ErrorException
     */
    private function removeNewFiles(){
        FileHelper::removeDirectory($this->getSaveDirPath());
    }

    /**
     * Перемещает новые принятые файлы в папку progress Для обраотки
     */
    private function progressNewFiles(){
        FileHelper::copyDirectory(Yii::getAlias($this->module->getNewDirPath()), $this->getProgressDirPath());
    }

    /**
     * Распоковывает все zip файлы найдены в папке загрузки
     * @return bool
     */
    private function unZipFiles(){
        $progressDirPath = Yii::getAlias($this->module->getProgressDirPath());

        if(!$this->module->enableZip){
            return false;
        }

        if($this->module->enableZip && !extension_loaded('zip')){
            return false;
        }

        $files = FileHelper::findFiles($progressDirPath, [
            'only'=>[
                "*.zip"
            ],
        ]);

        foreach($files as $file) {
            $zip = new \ZipArchive;
            if($zip->open($file) !== TRUE){
                continue;
            }

            $zip->extractTo(dirname($file));
            $zip->close();

            unlink($file);
        }
    }
}