<?php

namespace reketaka\helps\modules\onec\controllers;

use common\models\BaseHelper;
use function dirname;
use function md5;
use yii\helpers\FileHelper;
use yii\web\Controller;
use Yii;
use yii\base\Exception;

class ImportOnecController extends Controller{

    public $enableCsrfValidation = false;

    CONST FAIL_STATUS = 'failure';
    CONST SUCCESS_STATUS = 'success';

    private $uid = '000';

    private $uniqId = null;

    public function actionAuto($uid=false){
        /**
         * @var $type
         * @var $mode
         * @var $filename
         */
        $queryParams = Yii::$app->request->getQueryParams();
        extract($queryParams, EXTR_OVERWRITE);

        $this->uid = $uid;

        if(!isset($type) || !isset($mode)){
            return [
                self::FAIL_STATUS,
                'Variables "type" or "mode" not preset'
            ];
        }

        $functionName = $type.ucfirst($mode);

        if(method_exists($this, $functionName)){
            return $this->$functionName($queryParams);
        }

        return [
            self::FAIL_STATUS,
            'Select function not found'
        ];

    }

    /**
     * Формирует ответ в соответствии с форматом ответа по документации "Обмен данными с вебсайтом"
     * @param $result
     * @return string
     */
    private function formatAnswer($result){
        $resultText = [];
        foreach($result as $k=>$v){
            if(!is_numeric($k)){
                $resultText[]= "$k=$v";
                continue;
            }

            $resultText[] = "$v";
        }

        return implode("\n", $resultText);
    }

    public function runAction($id, $params = [])
    {
        try {
            $resultAction = parent::runAction($id, $params); // TODO: Change the autogenerated stub
        }catch (Exception $e){
            $resultAction = [
                self::FAIL_STATUS,
                $e->getMessage()
            ];
        }

        return $this->formatAnswer($resultAction);
    }

    private function tryAuth(){
        $authKeyCallback = $this->module->authKeyCallback;

        if(!$authKeyCallback instanceof \Closure) {
            if (!($cookie = Yii::$app->request->headers->get('cookie', false))) {
                throw new Exception('Not find authKey in Cookie');
            }

            list($n, $authKey) = explode('=', $cookie);
        }

        if($authKeyCallback instanceof \Closure){
            $authKey = $authKeyCallback($authKey);
        }

        list($authKey, $uniqId) = explode("_", $authKey);
        $this->uniqId = $uniqId;

        Yii::info('Ключ авторизациии '.$authKey, __METHOD__);

        if($authKey != $this->module->authKeyVal){
            throw new Exception('Not correct auth key');
        }
    }

    private function catalogCheckauth($args){
        try {
            $login = $_SERVER['PHP_AUTH_USER'];
            $password = $_SERVER['PHP_AUTH_PW'];
        }catch (\Exception $e){

            return [
                self::FAIL_STATUS,
                'Не переданны нужны параметры'
            ];
        }

        Yii::info('1с передает логин '.$login, __METHOD__);
        Yii::info('1с передает пароль '.$password, __METHOD__);

        if($login != $this->module->userName || $password != $this->module->userPassword){
            Yii::info('Не правильный логин или пароль', __METHOD__);
            return [
                self::FAIL_STATUS,
                'Username or userPassword not valid'
            ];
        }


        Yii::info('Пользователь найден и пароль верный', __METHOD__);

        return array(
            self::SUCCESS_STATUS,
            $this->module->authKeyName,
            $this->module->authKeyVal."_".md5(Yii::$app->security->generateRandomString())
        );
    }

    private function catalogInit($args){
        $this->tryAuth();

        $zip = $this->module->enableZip;
        if($zip && !extension_loaded('zip')){
            $zip = false;
        }

//        $this->removeNewFiles();


        return [
            'zip'=>$zip?'yes':'no',
            'file_limit'=>$this->module->maxFileSize
        ];
    }

    private function catalogFile($args){
        $user = $this->tryAuth();
        /**
         * @var $mode
         * @var $type
         * @var $filename
         */
        extract($args, EXTR_OVERWRITE);

        if(!isset($filename)){
            throw new Exception('Filename not set');
        }

        Yii::info('1с передает файл с именем '.$filename, __METHOD__);

        $saveDirPath = $this->getSaveDirPath();

        if(!FileHelper::createDirectory($saveDirPath)){
            throw new Exception('Can"t create dirSavePath');
        }

        if(file_put_contents($saveDirPath.$filename, Yii::$app->request->getRawBody(), FILE_APPEND) === FALSE){
            throw new Exception("Can't save file content to file");
        }

        return [
            'success'
        ];
    }

    private function catalogImport($args){
        $user = $this->tryAuth();

        /**
         * @var $mode
         * @var $type
         * @var $filename
         */
        extract($args, EXTR_OVERWRITE);

        Yii::info('Начало загрузки файла импорта', __METHOD__);

        $this->progressNewFiles();
//        $this->removeNewFiles();
        $this->unZipFiles();


        Yii::info('Все файлы распакованы', __METHOD__);

        return [
            'success'
        ];
    }

    private function getSaveDirPath(){
        return Yii::getAlias($this->module->saveDirPath.'/new/'.$this->uid.'/'.$this->uniqId.'/');
    }

    private function getProgressDirPath(){
        $path = Yii::getAlias($this->module->saveDirPath.'/progress/');
        FileHelper::createDirectory($path);
        return $path;
    }

    private function getBackupDirPath(){
        return Yii::getAlias($this->module->saveDirPath.'/backup/');
    }

    /**
     * Удаляет принятые файлы
     * @throws \yii\base\ErrorException
     */
    private function removeNewFiles(){
        FileHelper::removeDirectory($this->getSaveDirPath());
    }

    /**
     * Перемещает новые принятые файлы в папку progress Для обраотки
     */
    private function progressNewFiles(){
        FileHelper::copyDirectory(Yii::getAlias($this->module->saveDirPath.'/new/'.$this->uid.'/'), $this->getProgressDirPath());
    }

    /**
     * Распоковывает все zip файлы найдены в папке загрузки
     * @return bool
     */
    private function unZipFiles(){
        $progressDirPath = Yii::getAlias($this->module->saveDirPath.'/progress/');

        if(!$this->module->enableZip){
            return false;
        }

        if($this->module->enableZip && !extension_loaded('zip')){
            return false;
        }

        $files = FileHelper::findFiles($progressDirPath, [
            'only'=>[
                "*.zip"
            ],
        ]);

        foreach($files as $file) {
            $zip = new \ZipArchive;
            if($zip->open($file) !== TRUE){
                continue;
            }

            $zip->extractTo(dirname($file));
            $zip->close();

            unlink($file);
        }
    }
}